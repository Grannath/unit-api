import java.time.OffsetDateTime
import java.util.regex.Pattern

task generateVersionClass() {
    mustRunAfter(clean)
    group = 'build'
    doFirst {
        def targetDirectory = projectDir.toPath().resolve("build/generated/sources/version/java")
        // change package name
        def packageName = project.group.replace("-", "_") + "." + project.name.replace("-", "_")
        targetDirectory = targetDirectory.resolve(packageName.replace(".", "/"))
        targetDirectory.toFile().mkdirs()
        String version = project.version
        Pattern versionPattern = Pattern.compile("^[0-9]+\\.[0-9]+\\.[0-9]+(?>-SNAPSHOT)?\$")
        if (!versionPattern.matcher(version).find()) {
            version = "0.0.1-SNAPSHOT"
        }
        new File(targetDirectory.toFile(), "BuildVersion.java").text = """package ${packageName};
import java.time.OffsetDateTime;

/**
 * The BuildVersion class allows easy access to artifact id, group id, artifact version and build time.
 * The version is also available as integers in the attributes MAJOR_VERSION, MINOR_VERSION and PATCH_VERSION.
 */
public class BuildVersion {
    /**
     * The artifact id of this artifact
     */
    public static final String ARTIFACT_ID = "${project.name}";

    /**
     * The group id of this artifact
     */
    public static final String GROUP_ID = "${project.group}";


    /**
     * The version of this artifact
     */
    public static final String VERSION = "${version}";

    /**
     * The major part for the version of this artifact as an integer
     */
    public static final int MAJOR_VERSION = ${version.split("\\.")[0]};

    /**
     * The minor part for the version of this artifact as an integer
     */
    public static final int MINOR_VERSION = ${version.split("\\.")[1]};

    /**
     * The patch part for the version of this artifact as an integer
     */
    public static final int PATCH_VERSION = ${version.split("\\.")[2].split('-')[0]};

    /**
     * Indicates if this artifact is a snapshot version
     */
    public static final boolean SNAPSHOT = ${version.contains("-")};

    /**
     * The date time when this artifact was created
     */
    public static final OffsetDateTime BUILD_DATE = OffsetDateTime.parse("${OffsetDateTime.now().toString()}");
}
"""
    }
}

tasks.getByName('compileJava').dependsOn(generateVersionClass)