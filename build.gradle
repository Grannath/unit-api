import java.util.regex.Pattern

import java.time.OffsetDateTime

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

plugins {
    id 'java-library'
    id 'org.springframework.boot' version '2.3.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'

    // Auto Update Versions
    id 'se.patrikerdes.use-latest-versions' version '0.2.14'
    id 'com.github.ben-manes.versions' version '0.29.0'
}

allprojects {
    group = 'com.raynigon.unit-api'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '1.8'
    repositories {
        jcenter()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'maven-publish'

    sourceSets {
        main {
            java.srcDirs += "build/generated/sources/version/java"
        }
    }

    dependencies {
        implementation 'tech.units:indriya:2.0.4'
        implementation 'si.uom:si-quantity:2.0.1'

        testImplementation 'org.codehaus.groovy:groovy-all:2.4.20'
        testImplementation 'org.spockframework:spock-core:1.2-groovy-2.4'
    }

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/raynigon/unit-api")
                credentials {
                    username = System.getenv("USERNAME") ?: null
                    password = System.getenv("TOKEN") ?: null
                }
            }
        }
        publications {
            gpr(MavenPublication) {
                artifactId = project.name

                artifact project.tasks.jar

                pom.withXml {
                    def rootNode = asNode()

                    rootNode.remove((Node) ((Node) rootNode).get("dependencyManagement").get(0))
                    def dependenciesNode = rootNode.appendNode('dependencies')

                    def addDependency = { dependency, scope ->
                        dependenciesNode.appendNode('dependency').with {
                            appendNode('groupId', dependency.group)
                            appendNode('artifactId', dependency.name)
                            appendNode('version', dependency.version)
                            appendNode('scope', scope)
                        }
                    }
                    project.configurations.implementation.dependencies.each { addDependency(it, 'compile') }
                }
            }
        }
    }

    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }

    task versionClass() {
        def targetDirectory = projectDir.toPath().resolve("build/generated/sources/version/java")
        // change package name
        def packageName = project.group.replace("-", "_") + "." + project.name.replace("-", "_")
        targetDirectory = targetDirectory.resolve(packageName.replace(".", "/"))
        targetDirectory.toFile().mkdirs()
        new File(targetDirectory.toFile(), "BuildVersion.java").text = """package ${packageName};
import java.time.OffsetDateTime;

public class BuildVersion {
    public static final String ARTIFACT_ID = "${project.name}";
    public static final String GROUP_ID = "${project.group}";


    public static final String VERSION = "${project.version}";
    public static final int MAJOR_VERSION = ${(project.version as String).split("\\.")[0]};
    public static final int MINOR_VERSION = ${(project.version as String).split("\\.")[1]};
    public static final int PATCH_VERSION = ${(project.version as String).split("\\.")[2].split('-')[0]};
    public static final boolean SNAPSHOT = ${(project.version as String).contains("-")};
    public static final OffsetDateTime BUILD_DATE = OffsetDateTime.parse("${OffsetDateTime.now().toString()}");
}"""
    }

    tasks.getByName("build").dependsOn(tasks.getByName("versionClass"))
}

bootJar {
    enabled = false
}

def generateReadme(modules) {
    def maven = "**Maven**\n```\n"
    def gradle = "**Gradle**\n```\n"

    for (module in modules){
        maven +="<dependency>\n"
        maven +="    groupId>$project.group</groupId>\n"
        maven +="    <artifactId>$module</artifactId>\n"
        maven +="    <version>$project.version</version>\n"
        maven +="</dependency>\n"
        gradle += "implementation(\"$project.group:$module:$project.version\")\n"
    }
    maven += "```\n"
    gradle += "```\n"

    return "$maven\n$gradle"
}

task updateReadme() {
    def readme = new File("README.md").text as String
    def pattern = Pattern.compile("<!-- MODULE_LIST: ([A-z-_,]*) -->(\\n[^#]*)*<!-- END_MODULE_LIST -->")
    def matcher = pattern.matcher(readme)
    for(match in matcher){
        def full_match = match.get(0)
        def modules = match.get(1).split(",")
        def generatedBlock = generateReadme(modules)
        readme = readme.replace(full_match, generatedBlock)
    }
    new File("README.md").write(readme)
}

// TODO let this job depend on the release task only!
tasks.getByName("build").dependsOn(tasks.getByName("updateReadme"))
