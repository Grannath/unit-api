buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

plugins {
    id 'java-library'
    id 'signing'
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'

    // Auto Update Versions
    id 'se.patrikerdes.use-latest-versions' version '0.2.15'
    id 'com.github.ben-manes.versions' version '0.36.0'
}

allprojects {
    group = 'com.raynigon.unit-api'
    version = '1.1.0'
    sourceCompatibility = '1.8'
    repositories {
        jcenter()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'
    apply plugin: 'signing'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

    apply from: "$rootDir/gradle/scripts/publishing.gradle"
    apply from: "$rootDir/gradle/scripts/versionClass.gradle"

    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }

    sourceSets {
        main {
            java.srcDirs += "build/generated/sources/version/java"
        }
    }

    dependencies {
        implementation 'javax.measure:unit-api:2.1.1'

        testImplementation 'org.codehaus.groovy:groovy-all:3.0.7'
        testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
        testRuntime "net.bytebuddy:byte-buddy:1.10.19"
    }
}

bootJar {
    enabled = false
}

apply from: "$rootDir/gradle/scripts/updateMkdocsConfig.gradle"

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.]+(-r)?$/
    def spockRegex = /^[0-9.]*-groovy-[0-9.]*$/
    return !stableKeyword && !(version ==~ regex) && !(version ==~ spockRegex)
}

dependencyUpdates {
    // Example 1: reject all non stable versions
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}
